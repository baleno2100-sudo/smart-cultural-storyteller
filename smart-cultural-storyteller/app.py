import streamlit as st
import requests
import io
import datetime
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

# ================= CONFIG =================
OPENROUTER_API_KEY = st.secrets.get("OPENROUTER_API_KEY", "")
MODEL = "openai/gpt-4o-mini"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
# ===========================================

st.set_page_config(page_title="Smart Cultural Storyteller", page_icon="üé≠", layout="centered")

# ======== Theme State ========
if "theme" not in st.session_state:
    st.session_state["theme"] = "dark"

accent_color = "#FF9800"

# ======== Sidebar Theme Toggle ========
st.sidebar.title("Theme")
col1, col2 = st.sidebar.columns(2)
with col1:
    if st.button("üåû Light"):
        st.session_state["theme"] = "light"
with col2:
    if st.button("üåô Dark"):
        st.session_state["theme"] = "dark"

# ======== Story Category ========
st.sidebar.header("Choose a Category")
category = st.sidebar.radio(
    "Pick one:",
    ["Folk Tale", "Historical Event", "Tradition"],
    format_func=lambda x: f"üåü {x}" if x == "Folk Tale" else ("üìú "+x if x=="Historical Event" else "üéé "+x)
)

# ======== Story Inputs ========
story_title = st.text_input("Enter Story Title:", value="The Brave Soldier and the Whispering Woods")
story_prompt = st.text_input("Enter a prompt to begin your story:")

# Initialize story and moral in session
if "story" not in st.session_state:
    st.session_state["story"] = ""
if "moral" not in st.session_state:
    st.session_state["moral"] = ""

# ======== Story Generation Function ========
def generate_story(prompt, category):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    story_type = {
        "Folk Tale": "You are a magical storyteller. Retell folk tales in a vivid, enchanting, and interactive way. Make sure the story is at least 500 words long with dialogues, plot, and rich details.",
        "Historical Event": "You are a historian. Retell historical events in an engaging and detailed storytelling manner. Include context, characters, and vivid descriptions.",
        "Tradition": "You are a cultural guide. Explain traditions with stories and meaning in a detailed and captivating way."
    }

    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": story_type.get(category, story_type["Folk Tale"])},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1500,
        "temperature": 0.8,
        "stream": False
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        return f"Error: {response.status_code} - {response.text}"

# ======== Moral Generation Function ========
def generate_moral(story_text):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = f"Read the following story and generate a concise moral or lesson from it:\n\n{story_text}"

    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "You are a wise storyteller who summarizes morals from stories."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 100,
        "temperature": 0.7,
        "stream": False
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content'].strip()
    else:
        return "Bravery, wisdom, and kindness always triumph in the face of challenges."

# ======== PDF Export ========
def add_footer(canvas, doc):
    footer_text = f"Generated by Smart Cultural Storyteller ‚Äì {datetime.date.today().strftime('%b %d, %Y')}"
    canvas.setFont("Helvetica-Oblique", 9)
    canvas.setFillColor(colors.HexColor(accent_color))
    canvas.drawCentredString(letter[0] / 2.0, 30, footer_text)

def create_pdf(story_text, story_title, story_moral):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=72, leftMargin=72,
                            topMargin=72, bottomMargin=72)
    styles = getSampleStyleSheet()

    title_style = ParagraphStyle(
        "TitleStyle",
        parent=styles["Heading1"],
        fontName="Helvetica-Bold",
        fontSize=18,
        textColor=colors.HexColor(accent_color),
        alignment=1,  # Centered
        spaceAfter=20,
    )

    body_style = ParagraphStyle(
        "BodyStyle",
        parent=styles["Normal"],
        fontName="Helvetica",
        fontSize=12,
        leading=16,
        textColor=colors.black
    )

    moral_title_style = ParagraphStyle(
        "MoralTitle",
        parent=styles["Heading3"],
        fontName="Helvetica-BoldOblique",
        fontSize=14,
        textColor=colors.HexColor(accent_color),
        spaceAfter=4
    )

    moral_body_style = ParagraphStyle(
        "MoralBody",
        parent=styles["Normal"],
        fontName="Helvetica",
        fontSize=12,
        leading=16,
        textColor=colors.black
    )

    story = []
    # Story title
    story.append(Paragraph(story_title, title_style))
    story.append(Spacer(1, 12))

    # Story content
    for line in story_text.split("\n"):
        if line.strip():
            story.append(Paragraph(line.strip(), body_style))
            story.append(Spacer(1, 6))

    # Moral in highlighted box
    table = Table([[Paragraph("<b>Moral of the Story:</b>", moral_title_style),
                    Paragraph(story_moral, moral_body_style)]],
                  colWidths=[100, 380])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,-1), colors.HexColor("#FFF3E0")),
        ('BOX', (0,0), (-1,-1), 1, colors.HexColor(accent_color)),
        ('VALIGN', (0,0), (-1,-1), 'TOP'),
        ('LEFTPADDING', (0,0), (-1,-1), 10),
        ('RIGHTPADDING', (0,0), (-1,-1), 10),
        ('TOPPADDING', (0,0), (-1,-1), 6),
        ('BOTTOMPADDING', (0,0), (-1,-1), 6),
    ]))
    story.append(Spacer(1, 12))
    story.append(table)

    doc.build(story, onFirstPage=add_footer, onLaterPages=add_footer)
    buffer.seek(0)
    return buffer

# ======== Theme Styling ========
if st.session_state["theme"] == "dark":
    story_bg = "#1e1e1e"
    story_text_color = "#FFFFFF"
    scrollbar_thumb = "#888"
    scrollbar_track = "#333"
else:
    story_bg = "#f9f9f9"
    story_text_color = "#000000"
    scrollbar_thumb = "#555"
    scrollbar_track = "#DDD"

st.markdown(
    f"""
    <style>
        .stApp {{
            background-color: #222222;  /* App background always dark */
            color: #FFFFFF;
        }}
        .stButton button {{
            background-color: {accent_color};
            color: white;
            font-weight: bold;
            border-radius: 10px;
        }}
        .story-box {{
            overflow-y: auto;
            padding: 12px;
            background-color: {story_bg};
            border: 1px solid {accent_color};
            border-radius: 10px;
            color: {story_text_color};
            scrollbar-width: thin; 
            scrollbar-color: {scrollbar_thumb} {scrollbar_track};
            scroll-behavior: smooth;
        }}
        .story-box::-webkit-scrollbar {{
            width: 8px;
        }}
        .story-box::-webkit-scrollbar-track {{
            background: {scrollbar_track};
            border-radius: 8px;
        }}
        .story-box::-webkit-scrollbar-thumb {{
            background-color: {scrollbar_thumb};
            border-radius: 10px;
            border: 2px solid {scrollbar_track};
        }}
        /* Heading animation */
        @keyframes fadeSlide {{
            0% {{ opacity: 0; transform: translateY(-20px); }}
            100% {{ opacity: 1; transform: translateY(0); }}
        }}
        .story-heading {{
            text-align: center;
            color: {accent_color};
            animation: fadeSlide 1s ease-in-out;
        }}
        /* Moral glow animation */
        @keyframes glow {{
            0% {{ box-shadow: 0 0 5px {accent_color}; }}
            50% {{ box-shadow: 0 0 15px {accent_color}; }}
            100% {{ box-shadow: 0 0 5px {accent_color}; }}
        }}
        .moral-box {{
            margin-top: 20px;
            padding: 12px;
            background-color: #FFF3E0;
            border-left: 5px solid {accent_color};
            border-radius: 5px;
            animation: glow 2s infinite;
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# ======== Story Generation Button ========
if st.button("Generate Story"):
    if not story_prompt:
        st.warning("‚ö†Ô∏è Please enter a prompt first!")
    else:
        with st.spinner("Summoning your story... üåå"):
            story = generate_story(story_prompt, category)
            st.session_state["story"] = story
            st.session_state["moral"] = generate_moral(story)

# ======== Display Story ========
if st.session_state["story"]:
    story_length = len(st.session_state["story"].split("\n"))
    story_height = min(800, max(400, 30 * story_length))
    st.markdown(f"<style>.story-box {{height: {story_height}px;}}</style>", unsafe_allow_html=True)

    st.markdown(
        f"""
        <div class='story-box'>
            <h2 class='story-heading'>{story_title}</h2>
            <p>{st.session_state['story'].replace('\n','<br>')}</p>
            <div class='moral-box'>
                <h3 style='color:{accent_color}; margin:0;'>Moral of the Story:</h3>
                <p style='margin:0;'>{st.session_state.get('moral')}</p>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    # TXT download
    st.download_button(
        "üì• Download as TXT",
        data=st.session_state["story"].encode("utf-8"),
        file_name="story.txt",
        mime="text/plain",
    )

    # PDF download
    pdf_buffer = create_pdf(st.session_state["story"], story_title, st.session_state.get("moral"))
    st.download_button(
        "üì• Download as PDF",
        data=pdf_buffer,
        file_name="story.pdf",
        mime="application/pdf",
    )
