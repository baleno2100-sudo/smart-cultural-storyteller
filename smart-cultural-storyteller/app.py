import streamlit as st
import requests
import io
import datetime
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

# ================= CONFIG =================
OPENROUTER_API_KEY = st.secrets.get("OPENROUTER_API_KEY", "")
MODEL = "openai/gpt-4o-mini"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
# ===========================================

st.set_page_config(page_title="Smart Cultural Storyteller", page_icon="üé≠", layout="centered")

# ======== Theme State ========
if "theme" not in st.session_state:
    st.session_state["theme"] = "dark"

# ======== Sidebar Theme Toggle ========
st.sidebar.title("Theme")
col1, col2 = st.sidebar.columns(2)
with col1:
    if st.button("üåû Light"):
        st.session_state["theme"] = "light"
with col2:
    if st.button("üåô Dark"):
        st.session_state["theme"] = "dark"

accent_color = "#FF9800"  # Orange accent

# ======== Story Generation Function ========
def generate_story(prompt, category):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    story_type = {
        "Folk Tale": "You are a magical storyteller. Retell folk tales in a vivid, enchanting, and interactive way. Make sure the story is at least 500 words long with dialogues, plot, and rich details.",
        "Historical Event": "You are a historian. Retell historical events in an engaging and detailed storytelling manner. Include context, characters, and vivid descriptions.",
        "Tradition": "You are a cultural guide. Explain traditions with stories and meaning in a detailed and captivating way."
    }

    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": story_type.get(category, story_type["Folk Tale"])},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1500,
        "temperature": 0.8,
        "stream": False
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        return f"Error: {response.status_code} - {response.text}"

# ======== PDF Export ========
def add_footer(canvas, doc):
    footer_text = f"Generated by Smart Cultural Storyteller ‚Äì {datetime.date.today().strftime('%b %d, %Y')}"
    canvas.setFont("Helvetica-Oblique", 9)
    canvas.setFillColor(colors.HexColor(accent_color))
    canvas.drawCentredString(letter[0] / 2.0, 30, footer_text)

def create_pdf(story_text):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=72, leftMargin=72,
                            topMargin=72, bottomMargin=72)
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        "TitleStyle",
        parent=styles["Heading1"],
        fontName="Helvetica-Bold",
        fontSize=18,
        textColor=colors.HexColor(accent_color),
        spaceAfter=20,
    )
    body_style = ParagraphStyle(
        "BodyStyle",
        parent=styles["Normal"],
        fontName="Helvetica",
        fontSize=12,
        leading=16,
        textColor=colors.black
    )

    story = [Paragraph("üìñ Your Story", title_style), Spacer(1, 12)]
    for line in story_text.split("\n"):
        if line.strip():
            story.append(Paragraph(line.strip(), body_style))
            story.append(Spacer(1, 6))

    doc.build(story, onFirstPage=add_footer, onLaterPages=add_footer)
    buffer.seek(0)
    return buffer

# ======== Dynamic Story Box Styling ========
if st.session_state["theme"] == "dark":
    story_bg = "#1e1e1e"
    story_text_color = "#FFFFFF"
    scrollbar_thumb = "#888"
    scrollbar_track = "#333"
else:
    story_bg = "#f9f9f9"
    story_text_color = "#000000"
    scrollbar_thumb = "#555"
    scrollbar_track = "#DDD"

st.markdown(
    f"""
    <style>
        .stApp {{
            background-color: #222222;  /* Always dark app background */
            color: #FFFFFF;
        }}
        .stButton button {{
            background-color: {accent_color};
            color: white;
            font-weight: bold;
            border-radius: 10px;
        }}
        .story-box {{
            overflow-y: auto;
            padding: 12px;
            background-color: {story_bg};
            border: 1px solid {accent_color};
            border-radius: 10px;
            color: {story_text_color};
            scrollbar-width: thin; 
            scrollbar-color: {scrollbar_thumb} {scrollbar_track};
            scroll-behavior: smooth;
        }}
        .story-box::-webkit-scrollbar {{
            width: 8px;
        }}
        .story-box::-webkit-scrollbar-track {{
            background: {scrollbar_track};
            border-radius: 8px;
        }}
        .story-box::-webkit-scrollbar-thumb {{
            background-color: {scrollbar_thumb};
            border-radius: 10px;
            border: 2px solid {scrollbar_track};
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# ======== UI ========
st.title("üé≠ Smart Cultural Storyteller")
st.markdown("Retell **Folk Tales**, **Historical Events**, and **Traditions** with AI magic ‚ú®")

# Sidebar Category
st.sidebar.header("Choose a Category")
category = st.sidebar.radio(
    "Pick one:",
    ["Folk Tale", "Historical Event", "Tradition"],
    format_func=lambda x: f"üåü {x}" if x == "Folk Tale" else ("üìú "+x if x=="Historical Event" else "üéé "+x)
)

# User input
prompt = st.text_input("Enter a prompt to begin your story:")

if "story" not in st.session_state:
    st.session_state["story"] = ""

if st.button("Generate Story"):
    if not prompt:
        st.warning("‚ö†Ô∏è Please enter a prompt first!")
    else:
        with st.spinner("Summoning your story... üåå"):
            story = generate_story(prompt, category)
            st.session_state["story"] = story

if st.session_state["story"]:
    story_length = len(st.session_state["story"].split("\n"))
    story_height = min(800, max(400, 30 * story_length))
    st.markdown(f"<style>.story-box {{height: {story_height}px;}}</style>", unsafe_allow_html=True)

    st.subheader("üìñ Your Story:")
    st.markdown(f"<div class='story-box'>{st.session_state['story']}</div>", unsafe_allow_html=True)

    # TXT download
    st.download_button(
        "üì• Download as TXT",
        data=st.session_state["story"].encode("utf-8"),
        file_name="story.txt",
        mime="text/plain",
    )

    # PDF download
    pdf_buffer = create_pdf(st.session_state["story"])
    st.download_button(
        "üì• Download as PDF",
        data=pdf_buffer,
        file_name="story.pdf",
        mime="application/pdf",
    )
